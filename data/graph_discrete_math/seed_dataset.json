[
    {
        "question": "In an undirected path graph with 10 vertices, what is the size of a large clique that can be found within the graph?",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(10)\nprint(nx.approximation.large_clique_size(G))",
        "final_answer": "2",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "large_clique_size",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a cycle graph with 3 vertices (node 0, 1, 2) with an additional edge connecting node 2 and 3, what is the pairwise node connectivity for all distinct pairs of nodes in the graph? Return the result as a dictionary of dictionary format, e.g., the result for a graph with 3 nodes can be {node_id: {another_node_id: connectivity_between_them}}.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(3)\nG.add_edge(2, 3)\nprint(nx.all_pairs_node_connectivity(G))",
        "final_answer": "{0: {1: 2, 2: 2, 3: 1}, 1: {0: 2, 2: 2, 3: 1}, 2: {0: 2, 1: 2, 3: 1}, 3: {0: 1, 1: 1, 2: 1}}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "all_pairs_node_connectivity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an octahedral graph, what is the local node connectivity between nodes 0 and 5? Return the result as an integer.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import approximation as approx\nG = nx.octahedral_graph()\nprint(approx.local_node_connectivity(G, 0, 5))",
        "final_answer": "4",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "local_node_connectivity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected path graph with 10 vertices, what is the lower bound on the diameter of the graph?",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(10)  # undirected graph\nprint(nx.diameter(G))",
        "final_answer": "9",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "diameter_undirected",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed cycle graph with 3 vertices, what is the lower bound on the diameter of the graph?",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(3, create_using=nx.DiGraph)  # directed graph\nprint(nx.diameter(G))",
        "final_answer": "2",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "diameter_directed",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a Petersen graph (node id starting from 0), what is the minimum cardinality edge dominating set? Return the result as a set of edges, where each edge can be represented as a tuple of two nodes, e.g.,{(edge1node1, edge1node2), (edge2node1, edge2node2), ...}.",
        "rationale": "import networkx as nx\n\nG = nx.petersen_graph()\nprint(nx.approximation.min_edge_dominating_set(G))",
        "final_answer": "{(0, 1), (4, 9), (6, 8), (5, 7), (2, 3)}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "min_edge_dominating_set",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges [(0, 1), (0, 4), (1, 4), (1, 2), (2, 3), (3, 4), (2, 5)], what is the approximate minimum weight dominating set of nodes, assuming each node has a weight of one? Return the result as a set of nodes.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 4), (1, 4), (1, 2), (2, 3), (3, 4), (2, 5)])\nprint(nx.approximation.min_weighted_dominating_set(G))",
        "final_answer": "{1, 2, 4}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "min_weighted_dominating_set",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a Petersen graph, what are the approximate 2-component structures? Return the result as a list of sets of nodes.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import approximation as apxa\nG = nx.petersen_graph()\nprint(apxa.k_components(G)[2])",
        "final_answer": "[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "k_components",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, what is the value of the maximum cut, starting with an empty cut?",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\ncurr_cut_size, partition = nx.approximation.one_exchange(G, seed=1)\nprint(curr_cut_size)",
        "final_answer": "6",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "one_exchange_maxcut",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, given a partition ({0, 3, 4}, {1, 2}), what is the value of its cut?",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\ncut_size, partition = nx.approximation.randomized_partitioning(G, seed=1)\nprint(cut_size)",
        "final_answer": "6",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "randomized_partitioning_cutsize",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a weighted path graph with 4 vertices, where the edge between vertices 1 and 2 has a weight of 3 (other edges with weight 1), what is the average degree connectivity of the graph? Return the result in a dictionary format, i.e., {node_id: average_degree_connectivity_of_this_node}.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\nG.edges[1, 2][\"weight\"] = 3\nr = nx.average_degree_connectivity(G, weight=\"weight\")\nprint(r)",
        "final_answer": "{1: 2.0, 2: 1.75}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "average_degree_connectivity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph with nodes categorized by colors (i.e., color attribute), where nodes 0 and 1 are red and nodes 2 and 3 are blue, and edges connect red nodes to each other and blue nodes to each other, what is the assortativity coefficient based on the color attribute? Return the result as a float and keep 2 decimal places.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_nodes_from([0, 1], color=\"red\")\nG.add_nodes_from([2, 3], color=\"blue\")\nG.add_edges_from([(0, 1), (2, 3)])\nresult = nx.attribute_assortativity_coefficient(G, \"color\")\nprint(f\"{result:.2f}\")",
        "final_answer": "1.00",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "attribute_assortativity_coefficient",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed path graph with 4 vertices, what is the degree assortativity coefficient of the whole graph, considering both in-degrees and out-degrees for the computation? Return the result as a float and keep 2 decimal places.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\nr = nx.degree_assortativity_coefficient(G)\nprint(f\"{r:.2f}\")",
        "final_answer": "-0.50",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "degree_assortativity_coefficient",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph where nodes have a numeric attribute called \"size,\" with nodes 0 and 1 having a size of 2, and nodes 2 and 3 having a size of 3, what is the numeric assortativity coefficient based on the size attribute? Return the result as a float.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_nodes_from([0, 1], size=2)\nG.add_nodes_from([2, 3], size=3)\nG.add_edges_from([(0, 1), (2, 3)])\nprint(nx.numeric_assortativity_coefficient(G, \"size\"))",
        "final_answer": "1.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "numeric_assortativity_coefficient",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph where nodes 0 and 1 are colored red and nodes 2 and 3 are colored blue, with an edge connecting node 1 to node 3, what is the count of connections (edges) between one red source node and one blue destination node?",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_nodes_from([0, 1], color=\"red\")\nG.add_nodes_from([2, 3], color=\"blue\")\nG.add_edge(1, 3)\nd = nx.attribute_mixing_dict(G, \"color\")\nprint(d[\"red\"][\"blue\"])",
        "final_answer": "1",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "attribute_mixing_dict",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed star graph with 4 vertices (node 0 is central node), what is the degree mixing matrix for the out-degrees of the source nodes, assuming each edge has a weight of 1? Return the result as a list of lists.",
        "rationale": "import networkx as nx\n\nG = nx.star_graph(3)\nmix_mat = nx.degree_mixing_matrix(G)\nprint(mix_mat.tolist())",
        "final_answer": "[[0.0, 0.5], [0.5, 0.0]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "degree_mixing_matrix",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed path graph with 4 vertices, what is the average in-degree of the neighborhood for each node? Return the result in a dictionary format, i.e., {node_id: average_in_degree_of_neighbors}.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph()\n\nG.add_edges_from([(0, 1), (1, 2), (2, 3)])\n\nr = nx.average_neighbor_degree(G, source='in')\nprint(r)",
        "final_answer": "{0: 0.0, 1: 1.0, 2: 1.0, 3: 1.0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "average_neighbor_degree",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph where node 1 is colored red, node 2 is colored blue, and node 3 is colored green, what is the 2-tuple of color attribute values for the edge pointing from node 1 to 2? Return the result as a 2-tuple, i.e., (source_node_color, destination_node_color).",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph()\nG.add_node(1, color=\"red\")\nG.add_node(2, color=\"blue\")\nG.add_node(3, color=\"green\")\nG.add_edge(1, 2)\nprint(list(nx.node_attribute_xy(G, \"color\"))[0])",
        "final_answer": "('red', 'blue')",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "node_attribute_xy",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph where there is an edge from node 1 to node 2, what are the 2-tuples of degrees for the out-degree of node 1 and the in-degree of node 2? Return the result in a list format, i.e., [(out_degree1, in_degree2)].",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph()\nG.add_edge(1, 2)\nprint(list(nx.node_degree_xy(G, x=\"out\", y=\"in\")))",
        "final_answer": "[(1, 1)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "node_degree_xy_out_x_in_y",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph where there is an edge from node 1 to node 2, what are the 2-tuples of degrees for the in-degree of node 1 and the out-degree of node 2? Return the result in a list format, i.e., [(in_degree1, out_degree2)].",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph()\nG.add_edge(1, 2)\nprint(list(nx.node_degree_xy(G, x=\"in\", y=\"out\")))",
        "final_answer": "[(0, 0)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "node_degree_xy_in_x_out_y",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given a graph defined by the edges [(0, 1), (0, 2), (1, 2), (1, 3), (1, 4), (4, 5)], is the graph AT-free? Return True if it is AT-free, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (1, 2), (1, 3), (1, 4), (4, 5)])\nprint(nx.is_at_free(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_at_free_true",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given a cycle graph with 6 vertices, is the graph AT-free? Return True if it is AT-free, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(6)\nprint(nx.is_at_free(G))",
        "final_answer": "False",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_at_free_false",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given a bipartite path graph with 4 vertices (node 0, 1, 2, 3), what is the two-coloring (color 0 and 1) of the graph? Return the result where the key is the node id and the value is the color id.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.path_graph(4)\nc = bipartite.color(G)\nprint(c)",
        "final_answer": "{0: 1, 1: 0, 2: 1, 3: 0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "color",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete bipartite graph where one set of nodes (node 0, 1, 2) contains 3 vertices and the other set (node 3, 4) contains 2 vertices, what are the degrees of the nodes in the first set? Return the result in a dictionary format, i.e., {node_id: degree}.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.complete_bipartite_graph(3, 2)\nY = set([3, 4])\ndegX, degY = bipartite.degrees(G, Y)\nprint(dict(degX))",
        "final_answer": "{0: 2, 1: 2, 2: 2}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "degrees",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete bipartite graph where one set of nodes contains 3 vertices (node 0, 1, 2) and the other set contains 2 vertices (node 3, 4), what is the density of the subgraph when considering the first set of nodes? Return a float number.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.complete_bipartite_graph(3, 2)\nX = set([0, 1, 2])\nprint(bipartite.density(G, X))",
        "final_answer": "1.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "density",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given a path graph with 4 vertices, is the graph bipartite? Return True if it is bipartite, otherwise return False.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.path_graph(4)\nprint(bipartite.is_bipartite(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_bipartite",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 4 vertices (node 0, 1, 2, 3), if the subset of nodes {1, 3} is selected, do these nodes form one of the bipartite sets of the graph? Return True if it is, otherwise return False.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.path_graph(4)\nX = set([1, 3])\nprint(bipartite.is_bipartite_node_set(G, X))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_bipartite_node_set",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "The bipartite clustering coefficient is a measure of local density of connections defined as [1]_:\n .. math::\n\nc_u = \frac{\\sum_{v \\in N(N(u))} c_{uv} }{|N(N(u))|}\n\nwhere `N(N(u))` are the second order neighbors of `u` in `G` excluding `u`,\n\nand `c_{uv}` is the pairwise clustering coefficient between nodes\n\n`u` and `v`.\n\nThe mode selects the function for `c_{uv}` which can be:\n\n    `dot`:\n\n    .. math::\n\n    c_{uv}=\\frac{|N(u)\\cap N(v)|}{|N(u) \\cup N(v)|}\n\n    `min`:\n\n    .. math::\n\n    c_{uv}=\\frac{|N(u)\\cap N(v)|}{min(|N(u)|,|N(v)|)}\n\n    `max`:\n\n    .. math::\n\n    c_{uv}=\\frac{|N(u)\\cap N(v)|}{max(|N(u)|,|N(v)|)}.\n\nIn a bipartite path graph with 4 vertices, what are the bipartite clustering coefficient for node 0 using the \"dot\" method? Return a float number.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.path_graph(4)  # path graphs are bipartite\nc = bipartite.clustering(G)\nprint(c[0])",
        "final_answer": "0.5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "latapy_clustering",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For the Davis Southern Women graph, what is its Robins and Alexander bipartite clustering coefficient? Return a float number.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.davis_southern_women_graph()\nprint(bipartite.robins_alexander_clustering(G))",
        "final_answer": "0.46776406035665297",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "robins_alexander_clustering",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given a bipartite graph represented by a path graph with 5 vertices, and projecting onto the nodes [0, 2, 4], what are the weighted edges of the final_answering graph using the Jaccard index? Return the result as a list of edges, i.e., [(edge1node1, edge1node2, {'weight': weight1}), (edge2node1, edge2node2, {'weight': weight2})]. The edges should be in sorted order.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nB = nx.path_graph(5)\nnodes = [0, 2, 4]\nG = bipartite.overlap_weighted_projected_graph(B, nodes)\nprint(sorted(list(G.edges(data=True))))",
        "final_answer": "[(0, 2, {'weight': 0.5}), (2, 4, {'weight': 0.5})]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "jaccard_projected_graph",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a bipartite path graph B with 4 vertices, what is the projected graph when B is projected onto the nodes [1, 3]? Return the edges of the projected graph in list format with sorted edges, i.e., [(edge1node1, edge1node2), ...].",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nB = nx.path_graph(4)\nG = bipartite.projected_graph(B, [1, 3])\nprint(sorted(list(G.edges())))",
        "final_answer": "[(1, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "projected_graph",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a bipartite graph represented by a path graph with 4 vertices, what is the weighted projection when it is projected onto the nodes [1, 3], and how are the edge weights represented when the ratio between actual shared neighbors and possible shared neighbors is considered? Return the edges of the projected graph in list format with sorted edges, i.e., [(edge1node1, edge1node2, {'weight': weight1}), ...].",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nB = nx.path_graph(4)\nG = bipartite.weighted_projected_graph(B, [1, 3], ratio=True)\nprint(sorted(list(G.edges(data=True))))",
        "final_answer": "[(1, 3, {'weight': 0.5})]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "weighted_projected_graph",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a bipartite graph represented by a path graph with 4 vertices, what is the spectral bipartivity of the graph? Return a float number.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import bipartite\nG = nx.path_graph(4)\nprint(bipartite.spectral_bipartivity(G))",
        "final_answer": "1.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "spectral_bipartivity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a wheel graph with 6 vertices, what are the edges that form the edge boundary of the nodes {1, 3} with respect to the remaining nodes in the graph? Return the edges in list format with sorted edges, i.e., [(edge1node1, edge1node2), ...].",
        "rationale": "import networkx as nx\n\nG = nx.wheel_graph(6)\nprint(sorted(list(nx.edge_boundary(G, (1, 3)))))",
        "final_answer": "[(1, 0), (1, 2), (1, 5), (3, 0), (3, 2), (3, 4)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "edge_boundary",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a wheel graph with 6 vertices, what is the node boundary of the nodes {3, 4} with respect to the remaining nodes in the graph? Return the nodes in list format with sorted nodes, i.e., [node1, node2, ...].",
        "rationale": "import networkx as nx\n\nG = nx.wheel_graph(6)\nprint(sorted(list(nx.node_boundary(G, (3, 4)))))",
        "final_answer": "[0, 2, 5]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "node_boundary",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected barbell graph with 10 vertices, what are the bridges in the graph? Return the edges in list format with sorted edges, i.e., [(edge1node1, edge1node2), ...].",
        "rationale": "import networkx as nx\n\nG = nx.barbell_graph(10, 0)\nprint(sorted(list(nx.bridges(G))))",
        "final_answer": "[(9, 10)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "bridges",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph with edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what are the closeness centrality values for each of the nodes in the graph? Return the closeness centrality values in dictionary format, i.e., {node1: closeness_centrality1, node2: closeness_centrality2, ...}.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(nx.closeness_centrality(G))",
        "final_answer": "{0: 1.0, 1: 1.0, 2: 0.75, 3: 0.75}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "closeness_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph with edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what are the degree centrality values for each of the nodes in the graph? Return the degree centrality values in dictionary format, i.e., {node1: degree_centrality1, node2: degree_centrality2, ...}.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(nx.degree_centrality(G))",
        "final_answer": "{0: 1.0, 1: 1.0, 2: 0.6666666666666666, 3: 0.6666666666666666}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "degree_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what are the in-degree centrality values for each of the nodes in the graph? Return the in-degree centrality values in dictionary format, i.e., {node1: in_degree_centrality1, node2: in_degree_centrality2, ...}.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(nx.in_degree_centrality(G))",
        "final_answer": "{0: 0.0, 1: 0.3333333333333333, 2: 0.6666666666666666, 3: 0.6666666666666666}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "in_degree_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what are the out-degree centrality values for each of the nodes in the graph? Return the out-degree centrality values in dictionary format, i.e., {node1: out_degree_centrality1, node2: out_degree_centrality2, ...}.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(nx.out_degree_centrality(G))",
        "final_answer": "{0: 1.0, 1: 0.6666666666666666, 2: 0.0, 3: 0.0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "out_degree_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph with edges connecting nodes as follows: (0, 1), (1, 2), and (2, 3), what are the eigenvector centrality values for each of the nodes in the graph? Return the eigenvector centrality values of sorted nodes in list format, i.e., [(node_id, its_eigenvector_centrality), ...]. Each eigenvector centrality value should only keep 2 decimal places.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\ncentrality = nx.eigenvector_centrality(G)\nprint(sorted((v, float(f\"{c:0.2f}\")) for v, c in centrality.items()))",
        "final_answer": "[(0, 0.37), (1, 0.60), (2, 0.60), (3, 0.37)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "eigenvector_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "A weighted undirected graph with edges connecting nodes is defined as follows: (0, 1, 4), (0, 2, 2), (2, 1, 1), (1, 3, 2), (1, 4, 2), and (4, 5, 1) Each edge is in the form of (node1, node2, weight). What are the Laplacian centrality values for each of the nodes in the graph? Return the Laplacian centrality values of sorted nodes in list format, i.e., [(node_id, its_laplacian_centrality), ...]. Each Laplacian centrality value should only keep 2 decimal places.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nedges = [(0, 1, 4), (0, 2, 2), (2, 1, 1), (1, 3, 2), (1, 4, 2), (4, 5, 1)]\nG.add_weighted_edges_from(edges)\nprint(sorted((v, float(f\"{c:0.2f}\")) for v, c in nx.laplacian_centrality(G).items()))",
        "final_answer": "[(0, 0.70), (1, 0.90), (2, 0.28), (3, 0.22), (4, 0.26), (5, 0.04)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "laplacian_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting nodes as follows: (1, 2), (1, 3), and (3, 2), what is the global reaching centrality of the graph? Return a float number.",
        "rationale": "import networkx as nx\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nG = nx.DiGraph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(3, 2)\nprint(nx.global_reaching_centrality(G))",
        "final_answer": "0.75",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "global_reaching_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting nodes as follows: (1, 2), (1, 3), and (3, 2), what is the local reaching centrality of node 3 in the graph? Return a float number.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph()\nG.add_edges_from([(1, 2), (1, 3), (3, 2)])\nprint(nx.local_reaching_centrality(G, 3))",
        "final_answer": "0.5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "local_reaching_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a connected undirected graph represented by a star graph with 11 vertices (node 0 is the center node), what is the second order centrality value for node 0 in the graph? Return a float number.",
        "rationale": "import networkx as nx\n\nG = nx.star_graph(10)\nsoc = nx.second_order_centrality(G)\nprint(sorted(soc.items(), key=lambda x: x[1])[0][0])",
        "final_answer": "0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "second_order_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting the nodes as follows: (0, 1), (1, 2), (1, 5), (5, 4), (2, 4), (2, 3), (4, 3), and (3, 6), what are the communicability betweenness centrality values for each of the nodes in the graph? Return the communicability betweenness centrality values of sorted nodes in list format, i.e., [communicability_betweenness_centrality_first_node, communicability_betweenness_centrality_second_node, ...]. Each communicability betweenness centrality value should only keep 2 decimal places.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (1, 2), (1, 5), (5, 4), (2, 4), (2, 3), (4, 3), (3, 6)])\ncbc = nx.communicability_betweenness_centrality(G)\nprint([float(f\"{cbc[node]:0.2f}\") for node in sorted(cbc)])",
        "final_answer": "[0.03, 0.45, 0.51, 0.45, 0.40, 0.19, 0.03]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "communicability_betweenness_centrality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting the nodes as follows: (0, 1), (1, 2), (1, 5), (5, 4), (2, 4), (2, 3), (4, 3), and (3, 6), what is the Estrada index of the graph? Return the Estrada index only keeping 2 decimal places.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (1, 2), (1, 5), (5, 4), (2, 4), (2, 3), (4, 3), (3, 6)])\nei = nx.estrada_index(G)\nprint(float(f\"{ei:.2f}\"))",
        "final_answer": "20.55",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "estrada_index",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "VoteRank computes a ranking of the nodes in a graph G based on a voting scheme. With VoteRank, all nodes vote for each of its in-neighbors and the node with the highest votes is elected iteratively. The voting ability of out-neighbors of elected nodes is decreased in subsequent turns. In an undirected graph with edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), and (1, 4), what is the ranking of the nodes based on the VoteRank algorithm? Return the ranking of nodes in list format and only the voting ability of elected node and its out-neighbors are updated.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 4)])\nprint(nx.voterank(G))",
        "final_answer": "[0, 1]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "voterank_undirected",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "VoteRank computes a ranking of the nodes in a graph G based on a voting scheme. With VoteRank, all nodes vote for each of its in-neighbors and the node with the highest votes is elected iteratively. The voting ability of out-neighbors of elected nodes is decreased in subsequent turns. In a directed graph with edges connecting nodes as follows: (0, 1), (2, 1), (2, 3), and (3, 4), what is the ranking of the nodes based on the VoteRank algorithm? Return the ranking of nodes in list format. Note that for a directed graph, nodes only vote for their in-neighbors and only the voting ability of elected node and its out-neighbors are updated",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (2, 1), (2, 3), (3, 4)])\nprint(nx.voterank(G))",
        "final_answer": "[2, 3]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "voterank_directed",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "The chain decomposition of a graph with respect a depth-first search tree is a set of cycles or paths derived from the set of  fundamental cycles of the tree in the following manner. Consider each fundamental cycle with respect to the given tree, represented as a list of edges beginning with the nontree edge oriented away from the root of the tree. For each fundamental cycle, if it overlaps with any previous fundamental cycle, just take the initial non-overlapping segment, which is a path instead of a cycle. Each cycle or path is called a chain. In an undirected graph defined by the edges connecting the nodes as follows: (0, 1), (1, 4), (3, 4), (3, 5), and (4, 5), what is the chain decomposition of the graph when starting from node 4? Return the chain decomposition in list format, i.e., [[(first_chain_first_edge_source_node, first_chain_first_edge_destination_node), ...], ...]",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(list(nx.chain_decomposition(G, 4)))",
        "final_answer": "[[(4, 5), (5, 3), (3, 4)]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "chain_decomposition",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given an undirected wheel graph with 10 vertices, when it is completed to form a chordal graph, what is the edge list of this chordal graph? Return the edges in list format with sorted edges, i.e., [(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms.chordal import complete_to_chordal_graph\nG = nx.wheel_graph(10)\nH, alpha = complete_to_chordal_graph(G)\nprint(sorted(list(H.edges())))",
        "final_answer": "[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 2), (1, 9), (2, 3), (2, 9), (3, 4), (3, 8), (3, 9), (4, 5), (4, 7), (4, 8), (5, 6), (5, 7), (6, 7), (7, 8), (8, 9)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "complete_to_chordal_graph_edgelist",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given an undirected wheel graph with 10 vertices, and it is completed to form a chordal graph. What is the elimination ordering of the nodes used in this process? Return the elimination ordering in dictionary format, i.e., {node: elimination_order, ...}.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms.chordal import complete_to_chordal_graph\nG = nx.wheel_graph(10)\nH, alpha = complete_to_chordal_graph(G)\nprint(alpha)",
        "final_answer": "{0: 10, 1: 9, 2: 8, 3: 6, 4: 4, 5: 2, 6: 1, 7: 3, 8: 5, 9: 7}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "complete_to_chordal_graph_elimorder",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a chordal path graph with 10 vertices (starting from node 0), what is the set of induced nodes in the path from node 1 to node 9, assuming a maximum treewidth of 2? Return the induced nodes in list format in a sorted order.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG = nx.generators.classic.path_graph(10)\ninduced_nodes = nx.find_induced_nodes(G, 1, 9, 2)\nprint(sorted(induced_nodes))",
        "final_answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "find_induced_nodes",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In the Zachary's Karate Club Graph, what are the maximal cliques in the graph? Return the cliques in list format in sorted order, i.e., [[first_clique_source_node, first_clique_destination_node, ...], ...]",
        "rationale": "import networkx as nx\n\nG = nx.karate_club_graph()\nprint(sorted(nx.find_cliques(G)))",
        "final_answer": "[[0, 1, 2, 3, 7], [0, 1, 2, 3, 13], [0, 1, 17], [0, 1, 19], [0, 1, 21], [0, 4, 6], [0, 4, 10], [0, 5, 6], [0, 5, 10], [0, 8, 2], [0, 11], [0, 12, 3], [0, 31], [1, 30], [2, 9], [2, 27], [2, 28], [2, 32, 8], [5, 16, 6], [24, 25, 31], [24, 27], [25, 23], [33, 9], [33, 13], [33, 19], [33, 26, 29], [33, 27, 23], [33, 28, 31], [33, 32, 8, 30], [33, 32, 14], [33, 32, 15], [33, 32, 18], [33, 32, 20], [33, 32, 22], [33, 32, 23, 29], [33, 32, 31]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "find_cliques",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In the Zachary's Karate Club Graph, what is the clique number (size of the largest maximal clique) of the graph?",
        "rationale": "import networkx as nx\n\nG = nx.karate_club_graph()\nprint(max(len(c) for c in nx.find_cliques(G)))",
        "final_answer": "5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "find_cliques_clique_num",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, what is the average clustering coefficient of the graph? Return the average clustering coefficient in float format.",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\nprint(nx.average_clustering(G))",
        "final_answer": "1.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "average_clustering",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, what is the clustering coefficient for each node in the graph? Return the clustering coefficients in dictionary format, i.e., {node: clustering_coefficient, ...}",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\nprint(nx.clustering(G))",
        "final_answer": "{0: 1.0, 1: 1.0, 2: 1.0, 3: 1.0, 4: 1.0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "clustering",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, what are the square clustering coefficients for each of the nodes in the graph? Return the square clustering coefficients of the nodes in the sorted order in dictionary format, i.e., {node: square_clustering_coefficient, ...}",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\nprint(nx.square_clustering(G))",
        "final_answer": "{0: 1.0, 1: 1.0, 2: 1.0, 3: 1.0, 4: 1.0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "square_clustering",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, what is the transitivity of the graph? Return the transitivity in float format.",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\nprint(nx.transitivity(G))",
        "final_answer": "1.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "transitivity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, how many triangles are formed by including each of the nodes in the graph? Return the number of triangles for each node in the sorted order in dictionary format, i.e., {node: number_of_triangles, ...}",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\nprint(nx.triangles(G))",
        "final_answer": "{0: 6, 1: 6, 2: 6, 3: 6, 4: 6}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "triangles",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a cycle graph with 4 vertices (node 0, 1, 2, 3), what is an equitable coloring for the nodes if 3 colors (color 0, 1 and 2) are used? Ensure that no two adjacent nodes share the same color and that the number of nodes of each color differs by at most 1. Return the coloring in dictionary format, i.e., {node: color, ...}",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(4)\nprint(nx.coloring.equitable_color(G, num_colors=3))",
        "final_answer": "{0: 2, 1: 1, 2: 2, 3: 0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "equitable_color",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a barbell graph with 3 nodes on each side (edgelist is [(0, 1), (1, 2), (2, 0), (3, 4), (4, 5), (5, 3), (2, 3)]), what is the modularity of the partition consisting of two communities: {0, 1, 2} and {3, 4, 5}? Return the modularity value as a float only keeping 3 decimal places.",
        "rationale": "import networkx as nx\n\nG = nx.barbell_graph(3, 0)\nmodularity = nx.community.modularity(G, [{0, 1, 2}, {3, 4, 5}])\nprint(float(f'{modularity:.3f}'))",
        "final_answer": "0.357",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "modularity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a path graph with 4 vertices, is the graph biconnected? Return True if the graph is biconnected, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\nprint(nx.is_biconnected(G))",
        "final_answer": "False",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_biconnected",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a path graph with 4 vertices, is the graph connected? Return True if the graph is connected, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\nprint(nx.is_connected(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_connected",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (1, 2), (5, 6), and (3, 4), what is the set of nodes in the connected component containing node 0? Return the set of nodes in set format, i.e., {node1, node2, ...}",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (1, 2), (5, 6), (3, 4)])\nprint(nx.node_connected_component(G, 0))  # nodes of component that contains node 0",
        "final_answer": "{0, 1, 2}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "node_connected_component",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (1, 2), (5, 6), and (3, 4), how many connected components are present in the graph?",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (1, 2), (5, 6), (3, 4)])\nprint(nx.number_connected_components(G))",
        "final_answer": "3",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "number_connected_components",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed path graph with 4 vertices, is the graph semiconnected? Return True if the graph is semiconnected, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4, create_using=nx.DiGraph())\nprint(nx.is_semiconnected(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_semiconnected",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting the nodes as follows: (0, 1), (1, 2), (2, 3), (3, 0), (2, 4), and (4, 2), is the graph strongly connected? Return True if the graph is strongly connected, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (1, 2), (2, 3), (3, 0), (2, 4), (4, 2)])\nprint(nx.is_strongly_connected(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_strongly_connected",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting the nodes as follows: (0, 1) and (2, 1), and an additional isolated node 3, is the graph weakly connected? Return True if the graph is weakly connected, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (2, 1)])\nG.add_node(3)\nprint(nx.is_weakly_connected(G))",
        "final_answer": "False",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_weakly_connected",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting the nodes as follows: (0, 1), (2, 1), and (3, 4), how many weakly connected components are present in the graph?",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (2, 1), (3, 4)])\nprint(nx.number_weakly_connected_components(G))",
        "final_answer": "2",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "number_weakly_connected_components",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a Platonic Icosahedral Graph, what is the edge connectivity of the graph?",
        "rationale": "import networkx as nx\n\nG = nx.icosahedral_graph()\nprint(nx.edge_connectivity(G))",
        "final_answer": "5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "edge_connectivity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a Platonic Icosahedral Graph, what is the node connectivity of the graph?",
        "rationale": "import networkx as nx\n\nG = nx.icosahedral_graph()\nprint(nx.node_connectivity(G))",
        "final_answer": "5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "node_connectivity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a Platonic Icosahedral Graph, how many node disjoint paths exist between nodes 0 and 6?",
        "rationale": "import networkx as nx\n\nG = nx.icosahedral_graph()\nprint(len(list(nx.node_disjoint_paths(G, 0, 6))))",
        "final_answer": "5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "node_disjoint_paths",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a connected undirected graph with edges connecting nodes as follows: (\"x\", \"a\", weight=3), (\"x\", \"b\", weight=1), (\"a\", \"c\", weight=3), (\"b\", \"c\", weight=5), (\"b\", \"d\", weight=4), (\"d\", \"e\", weight=2), (\"c\", \"y\", weight=2), and (\"e\", \"y\", weight=3), what is the minimum edge cut of the graph by using Stoer-Wagner algorithm?",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_edge(\"x\", \"a\", weight=3)\nG.add_edge(\"x\", \"b\", weight=1)\nG.add_edge(\"a\", \"c\", weight=3)\nG.add_edge(\"b\", \"c\", weight=5)\nG.add_edge(\"b\", \"d\", weight=4)\nG.add_edge(\"d\", \"e\", weight=2)\nG.add_edge(\"c\", \"y\", weight=2)\nG.add_edge(\"e\", \"y\", weight=3)\ncut_value, partition = nx.stoer_wagner(G)\nprint(cut_value)",
        "final_answer": "4",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "stoer_wagner",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), is the set of edges {(2, 1), (3, 0)} a valid edge cover of the graph? Return True if it is a valid edge cover, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\ncover = {(2, 1), (3, 0)}\nprint(nx.is_edge_cover(G, cover))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_edge_cover",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what is the minimum edge cover of the graph? Return as a list of edges of the minimum edge cover in a sorted order, i.e., [(first_edge_source_node, first_edge_destination_node), ...]",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(sorted(nx.min_edge_cover(G)))",
        "final_answer": "[(2, 1), (3, 0)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "min_edge_cover",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a multigraph defined by the 2 edges connecting two nodes a and b, what is the cut size when partitioning the graph into two sets of nodes?",
        "rationale": "import networkx as nx\n\nG = nx.MultiGraph([\"ab\", \"ab\"])\nS = {\"a\"}\nT = {\"b\"}\nprint(nx.cut_size(G, S, T))",
        "final_answer": "2",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "cut_size",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the cycles connecting nodes as follows: [0, 1, 2, 3] and [0, 3, 4, 5], what are (or is) the cycle bases (or basis) for the graph starting from node 0? Return a list of cycles in sorted orderwhere each one is represented as a list of nodes, i.e., [[first_cycle_first_node, first_cycle_second_node, ...], ...]",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nnx.add_cycle(G, [0, 1, 2, 3])\nnx.add_cycle(G, [0, 3, 4, 5])\nprint(sorted(nx.cycle_basis(G, 0)))",
        "final_answer": "[[1, 2, 3, 0], [3, 4, 5, 0]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "cycle_basis",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "What is the girth of a Chvatal Graph?",
        "rationale": "import networkx as nx\n\nprint(nx.girth(nx.chvatal_graph()))",
        "final_answer": "4",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "girth",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the cycles connecting nodes as follows: [0, 1, 2, 3] and [0, 3, 4, 5], what is the minimum weight cycle basis for the graph? Return a list of cycles in sorted order, where each one is represented as a list of nodes, i.e., [[first_cycle_first_node, first_cycle_second_node, ...], ...].",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nnx.add_cycle(G, [0, 1, 2, 3])\nnx.add_cycle(G, [0, 3, 4, 5])\nprint(sorted(nx.minimum_cycle_basis(G)))",
        "final_answer": "[[3, 2, 1, 0], [5, 4, 3, 0]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "minimum_cycle_basis",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting nodes as follows: (0, 0), (0, 1), (0, 2), (1, 2), (2, 0), (2, 1), and (2, 2), what are the simple cycles present in the graph? Return a list of cycles in sorted order where each one is represented as a list of nodes, i.e., [[first_cycle_first_node, first_cycle_second_node, ...], ...].",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 0), (0, 1), (0, 2), (1, 2), (2, 0), (2, 1), (2, 2)])\nprint(sorted(nx.simple_cycles(G)))",
        "final_answer": "[[0], [0, 1, 2], [0, 2], [1, 2], [2]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "simple_cycles",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed acyclic graph (DAG) represented by the nodes and directed edges as follows: (0, 1), (1, 2), (2, 3), is the set of nodes {1} a minimal d-separator for node 0 and node 2? Return True if it is a minimal d-separator, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph([0, 1, 2, 3], create_using=nx.DiGraph)\nprint(nx.is_minimal_d_separator(G, 0, 2, {1}))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_minimal_d_separator",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting the nodes as follows: (1, 2), (2, 3), and (2, 4), what are all possible topological sorts of the graph? Return a list of topological sorts in sorted order where each one is represented as a list of nodes, i.e., [[first_sort_first_node, first_sort_second_node, ...], ...].",
        "rationale": "import networkx as nx\n\nDG = nx.DiGraph([(1, 2), (2, 3), (2, 4)])\nprint(sorted(list(nx.all_topological_sorts(DG))))",
        "final_answer": "[[1, 2, 3, 4], [1, 2, 4, 3]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "all_topological_sorts",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed path graph with 5 vertices (starting from node 0), what are the ancestor nodes of node 2? Return a list of ancestor nodes in sorted order, i.e., [first_ancestor, second_ancestor, ...].",
        "rationale": "import networkx as nx\n\nDG = nx.path_graph(5, create_using=nx.DiGraph)\nprint(sorted(nx.ancestors(DG, 2)))",
        "final_answer": "[0, 1]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "ancestors",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed acyclic graph (DAG) defined by the edges connecting nodes as follows: (1, 2), (1, 3), what are the antichains present in the graph? Return a list of antichains in sorted order, where each antichain is represented as a list of nodes, i.e., [first_node, second_node, ...] (empty list is also an antichain, so you should put it at first).",
        "rationale": "import networkx as nx\n\nDG = nx.DiGraph([(1, 2), (1, 3)])\nprint(sorted(list(nx.antichains(DG))))",
        "final_answer": "[[], [1], [2], [2, 3], [3]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "antichains",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed path graph with 5 vertices (starting from node 0), what are the descendants of node 2? Return a list of descendants in sorted order.",
        "rationale": "import networkx as nx\n\nDG = nx.path_graph(5, create_using=nx.DiGraph)\nprint(sorted(nx.descendants(DG, 2)))",
        "final_answer": "[3, 4]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "descendants",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), (3, 1), (1, 4) and (4, 1), is the graph aperiodic? Return True if it is aperiodic, otherwise return False.",
        "rationale": "import networkx as nx\n\nDG = nx.DiGraph([(1, 2), (2, 3), (3, 1), (1, 4), (4, 1)])\nprint(nx.is_aperiodic(DG))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_aperiodic",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting the nodes as follows: (1, 2), (2, 3), and (3, 1), is the graph a directed acyclic graph (DAG)? Return True if it is a DAG, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (2, 3), (3, 1)])\nprint(nx.is_directed_acyclic_graph(G))",
        "final_answer": "False",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_directed_acyclic_graph",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed graph defined by the edges connecting nodes as follows: (0, 1) and (1, 2), what is the topological sort order of the nodes in the graph? Return a list of nodes in topologically sorted order.",
        "rationale": "import networkx as nx\n\nDG = nx.DiGraph([(0, 1), (1, 2)])\nprint(list(nx.topological_sort(DG)))",
        "final_answer": "[0, 1, 2]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "topological_sort",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph with edges connecting nodes as follows: (1, 2) and (2, 3), what is the transitive closure of the graph? Return the edge list of the closure in a sorted list, i.e., [(first_edge_source_node, first_edge_destination_node2), ...].",
        "rationale": "import networkx as nx\n\nDG = nx.DiGraph([(1, 2), (2, 3)])\nTC = nx.transitive_closure(DG, reflexive=False)\nprint(sorted(list(TC.edges())))",
        "final_answer": "[(1, 2), (1, 3), (2, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "transitive_closure",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed acyclic graph defined by the edges connecting nodes as follows: (1, 2) and (2, 3), what is the transitive closure of the graph? Return the edge list of the closure in a sorted list, i.e., [(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nDG = nx.DiGraph([(1, 2), (2, 3)])\nTC = nx.transitive_closure_dag(DG)\nprint(sorted(list(TC.edges())))",
        "final_answer": "[(1, 2), (1, 3), (2, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "transitive_closure_dag",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed acyclic graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), and (1, 3), what is the transitive reduction of the graph? Return the edge list of the reduction in a sorted list, i.e., [(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nDG = nx.DiGraph([(1, 2), (2, 3), (1, 3)])\nTR = nx.transitive_reduction(DG)\nprint(sorted(list(TR.edges)))",
        "final_answer": "[(1, 2), (2, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "transitive_reduction",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a connected graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (1, 4), (3, 4), (3, 5), and (4, 5), what are the nodes that induce the barycenter of the graph? Return a list of nodes in sorted order.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(sorted(list(nx.barycenter(G))))",
        "final_answer": "[1, 3, 4]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "barycenter",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (1, 4), (3, 4), (3, 5), and (4, 5), what are the nodes that comprise the center of the graph? Return a list of nodes in sorted order.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(sorted(list(nx.center(G))))",
        "final_answer": "[1, 3, 4]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "center",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (1, 4), (3, 4), (3, 5), and (4, 5), what is the diameter of the graph?",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(nx.diameter(G))",
        "final_answer": "3",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "diameter",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (1, 4), (3, 4), (3, 5), and (4, 5), what is the effective graph resistance of the graph? Return the result in float format.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(nx.effective_graph_resistance(G))",
        "final_answer": "10.250000000000018",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "effective_graph_resistance",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a connected graph represented by a complete graph with 5 vertices, what is the Kemeny constant of the graph? Return the result in float format.",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\nprint(nx.kemeny_constant(G))",
        "final_answer": "3.2",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "kemeny_constant",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (1, 4), (3, 4), (3, 5), and (4, 5), what are the nodes that comprise the periphery of the graph? Return the result in a sorted list.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(sorted(list(nx.periphery(G))))",
        "final_answer": "[2, 5]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "periphery",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (1, 4), (3, 4), (3, 5), and (4, 5), what is the radius of the graph?",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(nx.radius(G))",
        "final_answer": "2",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "radius",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (1, 4), (3, 4), (3, 5), and (4, 5), what is the resistance distance between nodes 1 and 3? Return the result in float format.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (1, 4), (3, 4), (3, 5), (4, 5)])\nprint(nx.resistance_distance(G, 1, 3))",
        "final_answer": "0.6249999999999998",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "resistance_distance",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Here is the definition of a graph's global parameters: Given a distance-regular graph G with integers b_i, c_i, i = 0, ..., d such that for any 2 vertices x, y in G at a distance i = d(x,y), there are exactly c_i neighbors of y at a distance of i-1 from x and b_i neighbors of y at a distance of i+1 from x. Thus, a distance regular graph has the global parameters, [(c_0, a_0,b_0), (c_1,a_1,b_1), ..., (c_d,a_d,b_d)] for the intersection array [b_0, b_1, ..., b_{d-1}; c_1, c_2, ..., c_d] where a_i + b_i + c_i = k , k = degree of every vertex.\n\nFor a Dodecahedral Graph, what are its global parameters? Return the result in a sorted list, where each element is a tuple of (c_i, a_i, b_i).",
        "rationale": "import networkx as nx\n\nG = nx.dodecahedral_graph()\nb, c = nx.intersection_array(G)\nprint(sorted(list(nx.global_parameters(b, c))))",
        "final_answer": "[(0, 0, 3), (1, 0, 2), (1, 1, 1), (1, 1, 1), (2, 0, 1), (3, 0, 0)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "global_parameters",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a hypercube graph with 6 dimensions, is the graph distance-regular? Return True if the graph is distance-regular, or False otherwise.",
        "rationale": "import networkx as nx\n\nG = nx.hypercube_graph(6)\nprint(nx.is_distance_regular(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_distance_regular",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a cycle graph with 5 vertices, is the graph strongly regular? Return True if the graph is strongly regular, or False otherwise.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(5)\nprint(nx.is_strongly_regular(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_strongly_regular",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 5), (3, 4), and (4, 5), what are the dominance frontiers of each node reachable from the start node 1? Return the result in a dictionary format, i.e., {node: its_dominance_frontier, ...}. The dominace frontier of a node is in the form of a set of nodes.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (1, 3), (2, 5), (3, 4), (4, 5)])\n\nprint(nx.dominance_frontiers(G, 1))",
        "final_answer": "{1: set(), 3: {5}, 4: {5}, 2: {5}, 5: set()}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "dominance_frontiers",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph (with node 1, 2, 3, 4, 5) defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 5), (3, 4), and (4, 5), what are the immediate dominators of each node reachable from the start node 1? Return the result as a list of tuples in sorted order, e.g., [(first_node, first_node_immediate_dominator), (second_node, second_node_immediate_dominator), ...]",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (1, 3), (2, 5), (3, 4), (4, 5)])\nprint(sorted(nx.immediate_dominators(G, 1).items()))",
        "final_answer": "[(1, 1), (2, 1), (3, 1), (4, 3), (5, 1)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "immediate_dominators",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what is the efficiency of the pair of nodes 2 and 3? Return the result in float format.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(nx.efficiency(G, 2, 3))",
        "final_answer": "0.5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "efficiency",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what is the average global efficiency of the graph? Return the result in float format.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(nx.global_efficiency(G))",
        "final_answer": "0.9166666666666666",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "global_efficiency",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), and (1, 3), what is the average local efficiency of the graph? Return the result in float format.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3)])\nprint(nx.local_efficiency(G))",
        "final_answer": "0.9166666666666667",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "local_efficiency",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph with 4 vertices and defined by the edges connecting nodes as follows: (0, 1), (1, 2), and (0, 2), does the graph have an Eulerian path? Return True if the graph has an Eulerian path, or False otherwise.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (1, 2), (0, 2)])\nG.add_node(3)\nprint(nx.has_eulerian_path(G))",
        "final_answer": "False",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "has_eulerian_path",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph defined by the edges connecting nodes as follows: (\"x\", \"a\", capacity=3.0), (\"x\", \"b\", capacity=1.0), (\"a\", \"c\", capacity=3.0), (\"b\", \"c\", capacity=5.0), (\"b\", \"d\", capacity=4.0), (\"d\", \"e\", capacity=2.0), (\"c\", \"y\", capacity=2.0), and (\"e\", \"y\", capacity=3.0), what is the maximum single-commodity flow from node \"x\" to node \"y\"? Return the result in float format.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms.flow import boykov_kolmogorov\nG = nx.DiGraph()\nG.add_edge(\"x\", \"a\", capacity=3.0)\nG.add_edge(\"x\", \"b\", capacity=1.0)\nG.add_edge(\"a\", \"c\", capacity=3.0)\nG.add_edge(\"b\", \"c\", capacity=5.0)\nG.add_edge(\"b\", \"d\", capacity=4.0)\nG.add_edge(\"d\", \"e\", capacity=2.0)\nG.add_edge(\"c\", \"y\", capacity=2.0)\nG.add_edge(\"e\", \"y\", capacity=3.0)\nR = boykov_kolmogorov(G, \"x\", \"y\")\nflow_value = nx.maximum_flow_value(G, \"x\", \"y\")\nprint(flow_value)",
        "final_answer": "3.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "boykov_kolmogorov",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "A directed graph is defined by the following edges: (\"a\", \"b\", weight=3, capacity=4), (\"a\", \"c\", weight=6, capacity=10), (\"b\", \"d\", weight=1, capacity=9), (\"c\", \"d\", weight=2, capacity=5). And its nodes have attributes: (\"a\", demand=-5), (\"d\", demand=5). what is the total cost of the flow? Return the result in float format.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph()\nG.add_node(\"a\", demand=-5)\nG.add_node(\"d\", demand=5)\nG.add_edge(\"a\", \"b\", weight=3, capacity=4)\nG.add_edge(\"a\", \"c\", weight=6, capacity=10)\nG.add_edge(\"b\", \"d\", weight=1, capacity=9)\nG.add_edge(\"c\", \"d\", weight=2, capacity=5)\nflowDict = nx.min_cost_flow(G)\nprint(nx.cost_of_flow(G, flowDict))",
        "final_answer": "24",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "cost_of_flow",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph defined by the edges connecting nodes as follows: (\"x\", \"a\", capacity=3.0), (\"x\", \"b\", capacity=1.0), (\"a\", \"c\", capacity=3.0), (\"b\", \"c\", capacity=5.0), (\"b\", \"d\", capacity=4.0), (\"d\", \"e\", capacity=2.0), (\"c\", \"y\", capacity=2.0), and (\"e\", \"y\", capacity=3.0), what is the maximum single-commodity flow from node \"x\" to node \"y\"? Return the result in float format.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms.flow import preflow_push\nG = nx.DiGraph()\nG.add_edge(\"x\", \"a\", capacity=3.0)\nG.add_edge(\"x\", \"b\", capacity=1.0)\nG.add_edge(\"a\", \"c\", capacity=3.0)\nG.add_edge(\"b\", \"c\", capacity=5.0)\nG.add_edge(\"b\", \"d\", capacity=4.0)\nG.add_edge(\"d\", \"e\", capacity=2.0)\nG.add_edge(\"c\", \"y\", capacity=2.0)\nG.add_edge(\"e\", \"y\", capacity=3.0)\nR = preflow_push(G, \"x\", \"y\")\nflow_value = nx.maximum_flow_value(G, \"x\", \"y\")\nprint(flow_value)",
        "final_answer": "3.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "preflow_push",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph with 4 vertices and defined by only one edge connecting nodes as follows: (1, 2), is node 3 an isolate? Return True if the node is an isolate, or False otherwise.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_edge(1, 2)\nG.add_node(3)\nprint(nx.is_isolate(G, 3))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_isolate",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph with 3 vertices (node 1, 2, and 3) defined by only one edge connecting nodes as follows: (1, 2), what are the isolates in the graph? Return a list of the isolate nodes in sorted order.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_edge(1, 2)\nG.add_node(3)\nprint(sorted(list(nx.isolates(G))))",
        "final_answer": "[3]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "isolates",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph defined by the edges connecting nodes as follows: (0, 1), (1, 2), (2, 3), (0, 4), and (4, 3), what is the lowest common ancestor of nodes 2 and 4?",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph()\nnx.add_path(G, (0, 1, 2, 3))\nnx.add_path(G, (0, 4, 3))\nprint(nx.lowest_common_ancestor(G, 2, 4))",
        "final_answer": "0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "lowest_common_ancestor",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 3), (2, 4), (3, 5), and (4, 5), is it a matching of another graph containing the set of edges {(1, 3), (2, 4)}? Return True if it is a matching, or False otherwise.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (4, 5)])\nprint(nx.is_matching(G, {(1, 3), (2, 4)}))  # using set to represent matching",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_matching",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 3), (3, 4), and (3, 5), is it a maximal matching of another graph containing the set of edges {(1, 2), (3, 4)}? Return True if it is a maximal matching, or False otherwise.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (2, 3), (3, 4), (3, 5)])\nprint(nx.is_maximal_matching(G, {(1, 2), (3, 4)}))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_maximal_matching",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (4, 5), and (4, 6), is it a perfect matching of the graph containing the set of edges {(1, 2), (3, 5), (4, 6)}? Return True if it is a perfect matching, or False otherwise.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (4, 5), (4, 6)])\nmy_match = {1: 2, 3: 5, 4: 6}\nprint(nx.is_perfect_matching(G, my_match))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_perfect_matching",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges (each edge is in the form of (node1, node2, weight)) connecting nodes as follows: (1, 2, 6), (1, 3, 2), (2, 3, 1), (2, 4, 7), (3, 5, 9), and (4, 5, 3), what is the maximum-weight matching of the graph? Return a list of node pairs in sorted order, e.g.,[(first_edge_source_node, first_edge_target_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nedges = [(1, 2, 6), (1, 3, 2), (2, 3, 1), (2, 4, 7), (3, 5, 9), (4, 5, 3)]\nG.add_weighted_edges_from(edges)\nprint(sorted(nx.max_weight_matching(G)))",
        "final_answer": "[(2, 4), (5, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "max_weight_matching",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 3), (2, 4), (3, 5), and (4, 5), what is a maximal matching of the graph? Return a list of node pairs in sorted order, e.g.,[(first_edge_source_node, first_edge_target_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (4, 5)])\nprint(sorted(nx.maximal_matching(G)))",
        "final_answer": "[(1, 2), (3, 5)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "maximal_matching",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed multigraph defined by the edges connecting nodes as follows: (1, 2) and (2, 2), what graph is obtained when nodes 1 and 2 are contracted? Return a list of edges in sorted order, e.g.,[(first_edge_source_node, first_edge_target_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.MultiDiGraph([(1, 2), (2, 2)])\nH = nx.contracted_nodes(G, 1, 2)\nprint(sorted(list(H.edges())))  # edge 1->2, 2->2, 2<-2 from the original Graph G",
        "final_answer": "[(1, 1), (1, 1), (1, 1)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "contracted_nodes",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), (2, 5), (3, 4) and (4, 3), what is its moralized graph? Return a list of edges in sorted order, e.g.,[(first_edge_source_node, first_edge_target_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (2, 3), (2, 5), (3, 4), (4, 3)])\nG_moral = nx.moral_graph(G)\nprint(sorted(list(G_moral.edges())))",
        "final_answer": "[(1, 2), (2, 3), (2, 4), (2, 5), (3, 4)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "moral_graph",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph defined by the edges connecting nodes as follows: (0, 1), (1, 2), and (2, 3), if node 0 is labeled \"A\" and node 3 is labeled \"B,\" what are the predicted labels for all nodes using the Harmonic function algorithm? Return a list of labels in the order of node ids, e.g.,[node_0_label, node_1_label, ...].",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import node_classification\nG = nx.path_graph(4)\nG.nodes[0][\"label\"] = \"A\"\nG.nodes[3][\"label\"] = \"B\"\npredicted = node_classification.harmonic_function(G)\nprint(predicted)",
        "final_answer": "['A', 'A', 'B', 'B']",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "harmonic_function",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph defined by the edges connecting nodes as follows: (0, 1), (1, 2), and (2, 3), if node 0 is labeled \"A\" and node 3 is labeled \"B,\" what are the predicted labels for all nodes using the Local and Global Consistency algorithm? Return a list of labels in the order of node ids, e.g.,[node_0_label, node_1_label, ...].",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms import node_classification\nG = nx.path_graph(4)\nG.nodes[0][\"label\"] = \"A\"\nG.nodes[3][\"label\"] = \"B\"\npredicted = node_classification.local_and_global_consistency(G)\nprint(predicted)",
        "final_answer": "['A', 'A', 'B', 'B']",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "local_and_global_consistency",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For two graphs (node id starts from 1) defined by the edges connecting nodes as follows: Graph G1 with edges (1, 2) and (2, 3), and Graph G2 with edges (3, 4) and (5, 6), what is the edge list of the composition of these two graphs? Return a list of edges of the composition in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG1 = nx.Graph([(1, 2), (2, 3)])\nG2 = nx.Graph([(3, 4), (5, 6)])\nC = nx.compose_all([G1, G2])\nprint(sorted(list(C.edges())))",
        "final_answer": "[(1, 2), (2, 3), (3, 4), (5, 6)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "compose_all_edges",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For two graphs (node id starts from 1) defined by the edges connecting nodes as follows: Graph G1 with edges (1, 2) and (2, 3), and Graph G2 with edges (3, 4) and (5, 6), what is the node list of the composition of these two graphs? Return a list of nodes of the composition in sorted order, e.g.,[first_node, second_node, ...].",
        "rationale": "import networkx as nx\n\nG1 = nx.Graph([(1, 2), (2, 3)])\nG2 = nx.Graph([(3, 4), (5, 6)])\nC = nx.compose_all([G1, G2])\nprint(sorted(list(C.nodes())))",
        "final_answer": "[1, 2, 3, 4, 5, 6]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "compose_all_nodes",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For two graphs defined by the edges connecting nodes as follows: Graph G1 with edges (1, 2) and (2, 3), and Graph G2 with edges (2, 3) and (3, 4), what is the node list of the intersection of these two graphs? Return a list of nodes of the intersection in sorted order, e.g.,[first_node, second_node, ...].",
        "rationale": "import networkx as nx\n\nG1 = nx.Graph([(1, 2), (2, 3)])\nG2 = nx.Graph([(2, 3), (3, 4)])\nR = nx.intersection_all([G1, G2])\nprint(sorted(list(R.nodes())))",
        "final_answer": "[2, 3]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "intersection_all_nodes",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For two graphs defined by the edges connecting nodes as follows: Graph G1 with edges (1, 2) and (2, 3), and Graph G2 with edges (2, 3) and (3, 4), what is the edge list of the intersection of these two graphs? Return a list of edges of the intersection in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG1 = nx.Graph([(1, 2), (2, 3)])\nG2 = nx.Graph([(2, 3), (3, 4)])\nR = nx.intersection_all([G1, G2])\nprint(sorted(list(R.edges())))",
        "final_answer": "[(2, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "intersection_all_edges",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For two graphs defined by the edges connecting nodes as follows: Graph G1 with edges (1, 2) and (2, 3), and Graph G2 with edges (4, 5) and (5, 6), what is the node list of the union of them? Return a list of nodes of the union in sorted order, e.g.,[first_node, second_node, ...].",
        "rationale": "import networkx as nx\n\nG1 = nx.Graph([(1, 2), (2, 3)])\nG2 = nx.Graph([(4, 5), (5, 6)])\nfinal_answer_graph = nx.union_all([G1, G2])\nprint(sorted(list(final_answer_graph.nodes())))",
        "final_answer": "[1, 2, 3, 4, 5, 6]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "union_all_nodes",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For two graphs defined by the edges connecting nodes as follows: Graph G1 with edges (1, 2) and (2, 3), and Graph G2 with edges (4, 5) and (5, 6), what is the edge list of the union of them? Return a list of edges of the union in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG1 = nx.Graph([(1, 2), (2, 3)])\nG2 = nx.Graph([(4, 5), (5, 6)])\nfinal_answer_graph = nx.union_all([G1, G2])\nprint(sorted(list(final_answer_graph.edges())))",
        "final_answer": "[(1, 2), (2, 3), (4, 5), (5, 6)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "union_all_edges",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph G defined by the edges connecting nodes as follows: (0, 1), (0, 2), (1, 2), and (1, 3), if another graph H is defined by the edges (0, 1), (1, 2), and (0, 3), what is the edge list of a new graph that contains the edges existing in G but not in H? Return a list of edges in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (1, 2), (1, 3)])\nH = nx.Graph([(0, 1), (1, 2), (0, 3)])\nR = nx.difference(G, H)\nprint(sorted(list(R.edges())))",
        "final_answer": "[(0, 2), (1, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "difference",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a path graph with 4 vertices and is defined by the edges connecting nodes as follows: (0, 1), (1, 2), and (2, 3), what is the edge list of the resulting graph after computing the 2nd power of this path graph? Return a list of edges in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\nprint(sorted(list(nx.power(G, 2).edges)))",
        "final_answer": "[(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "power",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 3), (3, 4), and (3, 5), what is the edge list of the complement of this graph? Return a list of edges in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (1, 3), (2, 3), (3, 4), (3, 5)])\nG_complement = nx.complement(G)\nprint(sorted(list(G_complement.edges())))",
        "final_answer": "[(1, 4), (1, 5), (2, 4), (2, 5), (4, 5)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "complement",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 3), (3, 4), and (3, 5), what is the edge list of the reverse of this graph ? Return a list of edges in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (1, 3), (2, 3), (3, 4), (3, 5)])\nG_reversed = nx.reverse(G)\nprint(sorted(list(G_reversed.edges())))",
        "final_answer": "[(2, 1), (3, 1), (3, 2), (4, 3), (5, 3)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "reverse",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting nodes as follows: (0, 1) and (0, 2), is the graph planar? Return True if it is planar, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2)])\nprint(nx.is_planar(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_planar",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a cycle graph with 5 vertices, what is the chromatic polynomial of the graph?",
        "rationale": "import networkx as nx\n\nC = nx.cycle_graph(5)\nprint(nx.chromatic_polynomial(C))",
        "final_answer": "x**5 - 5*x**4 + 10*x**3 - 10*x**2 + 4*x",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "chromatic_polynomial",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), (3, 4), and (4, 1), is the graph 3-regular? Return True if it is 3-regular, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (2, 3), (3, 4), (4, 1)])\nprint(nx.is_k_regular(G, k=3))",
        "final_answer": "False",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_k_regular",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), (3, 4), and (4, 1), is it a regular graph? Return True if it is regular, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (2, 3), (3, 4), (4, 1)])\nprint(nx.is_regular(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_regular",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), (3, 4), and (4, 1), what is a k-factor of this graph for k = 1? Return the edge list of this k-factor graph in sorted order, e.g.,[(first_edge_source_node, first_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(1, 2), (2, 3), (3, 4), (4, 1)])\nG2 = nx.k_factor(G, k=1)\nprint(sorted(list(G2.edges())))",
        "final_answer": "[(1, 2), (3, 4)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "k_factor",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In an undirected graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (1, 2), (1, 3), (1, 4), and (4, 5), what is the rich-club coefficient of the graph for degree 0? Return the coefficient in float format.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (0, 2), (1, 2), (1, 3), (1, 4), (4, 5)])\nrc = nx.rich_club_coefficient(G, normalized=False, seed=42)\nprint(rc[0])",
        "final_answer": "0.4",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "rich_club_coefficient",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a cycle graph with 4 vertices, what are the shortest paths between node 0 and node2? Return all paths in sorted order in a list, where each path is a list of nodes including node 0 and node 2.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(4)\nprint(dict(nx.all_pairs_all_shortest_paths(G))[0][2])",
        "final_answer": "[[0, 1, 2], [0, 3, 2]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "all_pairs_all_shortest_paths",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 5 vertices, what is the shortest path from node 0 to node 4? Return the path as a list of nodes.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(5)\nprint(nx.shortest_path(G, source=0, target=4))",
        "final_answer": "[0, 1, 2, 3, 4]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "shortest_path",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 5 vertices, what is the shortest path length from node 0 to node 4?",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(5)\nprint(nx.shortest_path_length(G, source=0, target=4))",
        "final_answer": "4",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "shortest_path_length",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 4 vertices, given a path starting from node 0, what is the predecessor of node 3? Return the predecessor as a list of nodes in sorted order.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\nprint(sorted(nx.predecessor(G, 0)[3]))",
        "final_answer": "[2]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "predecessor",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a weighted multi graph defined by the edges connecting nodes as follows: (0, 1, weight=1), (0, 1, weight=2), (1, 2, weight=1), and (2, 3, weight=3), what is the shortest path between node 0 and node 3? Return the path as a list of nodes.",
        "rationale": "import networkx as nx\n\nG = nx.MultiGraph()\nG.add_edge(0, 1, weight=1)\nG.add_edge(0, 1, weight=2)\nG.add_edge(1, 2, weight=1)\nG.add_edge(2, 3, weight=3)\npath = dict(nx.all_pairs_bellman_ford_path(G))\nprint(path[0][3])",
        "final_answer": "[0, 1, 2, 3]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "all_pairs_bellman_ford_path",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a weighted multi graph defined by the edges connecting nodes as follows: (0, 1, weight=1), (0, 1, weight=2), (1, 2, weight=1), and (2, 3, weight=3), what is the shortest path length from node 0 to node 3?",
        "rationale": "import networkx as nx\n\nG = nx.MultiGraph()\nG.add_edge(0, 1, weight=1)\nG.add_edge(0, 1, weight=2)\nG.add_edge(1, 2, weight=1)\nG.add_edge(2, 3, weight=3)\nprint(nx.bellman_ford_path_length(G, 0, 3))",
        "final_answer": "5",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "bellman_ford_path_length",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a weighted multi graph defined by the edges connecting nodes as follows: (0, 1, weight=1), (0, 1, weight=2), (1, 2, weight=1), and (2, 3, weight=3), what is the predecessor of node 3 considering the shortest path starting from node 0? Return the result as a list of nodes in sorted order.",
        "rationale": "import networkx as nx\n\nG = nx.MultiGraph()\nG.add_edge(0, 1, weight=1)\nG.add_edge(0, 1, weight=2)\nG.add_edge(1, 2, weight=1)\nG.add_edge(2, 3, weight=3)\npred, dist = nx.dijkstra_predecessor_and_distance(G, 0)\nprint(sorted(pred[3]))",
        "final_answer": "[2]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "dijkstra_predecessor_and_distance",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed cycle graph defined by the edges connecting nodes as follows: (0, 1, weight=1), (1, 2, weight=-7), (2, 3, weight=1), and (3, 4, weight=1), does the graph contain any negative edge cycle? Return True if a negative cycle exists, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(5, create_using=nx.DiGraph())\nG[1][2][\"weight\"] = -7\nprint(nx.negative_edge_cycle(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "negative_edge_cycle",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a cycle graph with 2 vertices, what is the SimRank similarity between node 0 and any node in the graph? Return the similarity values as a dictionary, i.e., {node 0: similarity between node 0 and node 0, node 1: similarity between node 0 and node 1}.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(2)\nprint(nx.simrank_similarity(G, source=0))",
        "final_answer": "{0: 1.0, 1: 0.0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "simrank_similarity",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a cycle graph with 4 vertices, do the nodes [2, 3, 0] form a simple path? Return True if they form a simple path, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(4)\nprint(nx.is_simple_path(G, [2, 3, 0]))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_simple_path",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a path graph with 3 vertices, is this graph a threshold graph? Return True if it is, otherwise return False.",
        "rationale": "import networkx as nx\n\nfrom networkx.algorithms.threshold import is_threshold_graph\nG = nx.path_graph(3)\nprint(is_threshold_graph(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_threshold_graph",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed tournament graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3), what is a Hamiltonian path in this graph? Return the Hamiltonian path as a list of nodes.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)])\nprint(nx.tournament.hamiltonian_path(G))",
        "final_answer": "[0, 1, 2, 3]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "hamiltonian_path",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed tournament graph defined by the edges connecting nodes as follows: (1, 0), (1, 3), (1, 2), (2, 3), (2, 0), and (3, 0), is there a path from node 3 to node 2? Return True if there is a path, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 0), (1, 3), (1, 2), (2, 3), (2, 0), (3, 0)])\nprint(nx.tournament.is_reachable(G, 3, 2))",
        "final_answer": "False",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_reachable",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed tournament defined by the edges connecting nodes as follows: (0, 1), (0, 2), (1, 2), (1, 3), (2, 3), and (3, 0), is the tournament strongly connected? Return True if the tournament is strongly connected, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 0)])\nprint(nx.tournament.is_strongly_connected(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_strongly_connected_tournament",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph defined by the edges connecting nodes as follows: (0, 1), (1, 2), and (2, 0), can this graph be classified as a tournament graph? Return True if the graph is a tournament graph, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (1, 2), (2, 0)])\nprint(nx.is_tournament(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_tournament",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed tournament defined by the edges connecting nodes as follows: (1, 0), (1, 3), (0, 2), (0, 3), (2, 1), and (3, 2), what is the score sequence of the graph? Return as a list of integers.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 0), (1, 3), (0, 2), (0, 3), (2, 1), (3, 2)])\nprint(nx.tournament.score_sequence(G))",
        "final_answer": "[1, 1, 2, 2]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "score_sequence",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (1, 3), (1, 4), (2, 5), and (2, 6), what are the layers of nodes encountered during a breadth-first search starting from node 1? Return the layers as a dictionary with the layer number (starting from layer 0) as the key and the list of nodes in that layer as the value.",
        "rationale": "import networkx as nx\n\nH = nx.Graph()\nH.add_edges_from([(0, 1), (0, 2), (1, 3), (1, 4), (2, 5), (2, 6)])\nprint(dict(enumerate(nx.bfs_layers(H, [1]))))",
        "final_answer": "{0: [1], 1: [0, 3, 4], 2: [2], 3: [5, 6]}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "bfs_layers",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 3 vertices, what are the predecessors for each node (neglecting nodes without predecessors) when performing a breadth-first search starting from node 0? Return the predecessors as a dictionary with the node as the key and its predecessor as the value.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(3)\nprint(dict(nx.bfs_predecessors(G, 0)))",
        "final_answer": "{1: 0, 2: 1}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "bfs_predecessors",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (1, 3), (1, 4), (2, 5), and (2, 6), what are the successors of each node (neglecting nodes without successors) when performing a breadth-first search starting from node 0? Return the successors as a dictionary with the node as the key and the list of successors (in sorted order) as the value.",
        "rationale": "import networkx as nx\n\nH = nx.Graph()\nH.add_edges_from([(0, 1), (0, 2), (1, 3), (1, 4), (2, 5), (2, 6)])\nd = dict(nx.bfs_successors(H, 0))\nfor k, v in d.items():\n    d[k] = sorted(v)\nprint(d)",
        "final_answer": "{0: [1, 2], 1: [3, 4], 2: [5, 6]}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "bfs_successors",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a directed graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (1, 3), (1, 4), (2, 5), and (2, 6), what are the nodes that are descendants of node 0 at a distance of 2? Return the nodes as a set.",
        "rationale": "import networkx as nx\n\nH = nx.DiGraph()\nH.add_edges_from([(0, 1), (0, 2), (1, 3), (1, 4), (2, 5), (2, 6)])\nprint(nx.descendants_at_distance(H, 0, 2))",
        "final_answer": "{3, 4, 5, 6}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "descendants_at_distance",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 5 vertices, what are the edges encountered during a depth-first search starting from node 0? Return the edges as a list of tuples, i.e., [(first_edge_source_node, first_edge_destination_node), (second_edge_source_node, second_edge_destination_node), ...]",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(5)\nprint(list(nx.dfs_edges(G, source=0)))",
        "final_answer": "[(0, 1), (1, 2), (2, 3), (3, 4)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "dfs_edges",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 5 vertices, what is the encounter order of nodes in a post-order depth-first search starting from node 0? Return the encountered nodes as a list.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(5)\nprint(list(nx.dfs_postorder_nodes(G, source=0)))",
        "final_answer": "[4, 3, 2, 1, 0]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "dfs_postorder_nodes",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 4 vertices (node 0, 1, 2, 3), what are the predecessor nodes for each node (neglecting nodes without predecessors) when performing a depth-first search starting from node 0? Return the predecessor nodes as a dictionary with the node as the key and its predecessor as the value.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(4)\nprint(dict(nx.dfs_predecessors(G, source=0)))",
        "final_answer": "{1: 0, 2: 1, 3: 2}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "dfs_predecessors",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 5 vertices, what is the encounter order of nodes in pre-order depth-first search starting from node 0? Return the encountered nodes as a list.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(5)\nprint(list(nx.dfs_preorder_nodes(G, source=0)))",
        "final_answer": "[0, 1, 2, 3, 4]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "dfs_preorder_nodes",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 5 vertices (node 0, 1, 2, 3, 4), what are the successor nodes for each node (neglecting nodes without successors) when performing a depth-first search starting from node 0? Return the successor nodes as a dictionary with the node as the key and the list of successors (in sorted order) as the value.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(5)\nprint(dict(nx.dfs_successors(G, source=0, sort_neighbors=sorted)))",
        "final_answer": "{0: [1], 1: [2], 2: [3], 3: [4]}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "dfs_successors",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "Given a tree defined by the edges connecting nodes as follows: (0, 3), (1, 3), (2, 3), (3, 4), and (4, 5), what is the corresponding Pr\u00fcfer sequence for this tree? Return the sequence as a list of nodes.",
        "rationale": "import networkx as nx\n\nedges = [(0, 3), (1, 3), (2, 3), (3, 4), (4, 5)]\ntree = nx.Graph(edges)\nprint(nx.to_prufer_sequence(tree))",
        "final_answer": "[3, 3, 3, 4]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "to_prufer_sequence",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 5 vertices, how many spanning trees can be formed from this graph?",
        "rationale": "import networkx as nx\n\nG = nx.complete_graph(5)\nprint(nx.number_of_spanning_trees(G))",
        "final_answer": "125",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "number_of_spanning_trees",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed tree graph defined by the edges connecting nodes as follows: (0, 1), (0, 2), (2, 3), and (3, 4), is this graph an arborescence? Return True if it is an arborescence, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (0, 2), (2, 3), (3, 4)])\nprint(nx.is_arborescence(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_arborescence",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed graph defined by the edges connecting nodes as follows: (0, 1), (1, 2), (2, 3), and (3, 4), is this graph a branching? Return True if it is a branching, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(0, 1), (1, 2), (2, 3), (3, 4)])\nprint(nx.is_branching(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_branching",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 4), and (2, 5), is this graph a forest? Return True if it is a forest, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_edges_from([(1, 2), (1, 3), (2, 4), (2, 5)])\nprint(nx.is_forest(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_forest",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 4), and (2, 5), is this graph a tree? Return True if it is a tree, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.Graph()\nG.add_edges_from([(1, 2), (1, 3), (2, 4), (2, 5)])\nprint(nx.is_tree(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_tree",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a directed graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), and (3, 1), is this graph a valid triad? Return True if it is a triad, otherwise return False.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (2, 3), (3, 1)])\nprint(nx.is_triad(G))",
        "final_answer": "True",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "is_triad",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "A triad type can be represented in the form of {m}{a}{n}{type} (for example: 111D). {m} = number of mutual ties (takes 0, 1, 2, 3); a mutual tie is (0,1) AND (1,0). {a} = number of asymmetric ties (takes 0, 1, 2, 3); an asymmetric tie is (0,1) BUT NOT (1,0) or vice versa. {n} = number of null ties (takes 0, 1, 2, 3); a null tie is NEITHER (0,1) NOR (1,0). {type} = a letter (takes U, D, C, T) corresponding to up, down, cyclical and transitive. {type} is only used for topologies that can have more than one form (eg: 021D and 021U).\n\nFor a directed graph defined by the edges connecting nodes as follows: (1, 2), (2, 3), and (3, 1), what is the sociological triad type for this triad? Return a string.",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (2, 3), (3, 1)])\nprint(nx.triad_type(G))",
        "final_answer": "030C",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "triad_type",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "A triad type can be represented in the form of {m}{a}{n}{type} (for example: 111D). {m} = number of mutual ties (takes 0, 1, 2, 3); a mutual tie is (0,1) AND (1,0). {a} = number of asymmetric ties (takes 0, 1, 2, 3); an asymmetric tie is (0,1) BUT NOT (1,0) or vice versa. {n} = number of null ties (takes 0, 1, 2, 3); a null tie is NEITHER (0,1) NOR (1,0). {type} = a letter (takes U, D, C, T) corresponding to up, down, cyclical and transitive. {type} is only used for topologies that can have more than one form (eg: 021D and 021U).\n\nIn a directed graph defined by the edges connecting nodes as follows: (1, 2), (1, 3), (2, 3), (3, 1), (5, 6), (5, 4), and (6, 7), what is the 120C triad in this graph? Return in sorted order the edge list of the 120C triad, i.e., [(first_edge_source_node, first_edge_destination_node), (second_edge_source_node, second_edge_destination_node), ...].",
        "rationale": "import networkx as nx\n\nG = nx.DiGraph([(1, 2), (1, 3), (2, 3), (3, 1), (5, 6), (5, 4), (6, 7)])\ndict = nx.triads_by_type(G)\nprint(sorted(list(dict[\"120C\"][0].edges())))",
        "final_answer": "[(1, 2), (1, 3), (2, 3), (3, 1)]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "triads_by_type",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "For a cycle graph with 3 vertices (node 0, 1, 2), what is the closeness vitality of each node? Return a dictionary, i.e., {node: closeness_vitality}.",
        "rationale": "import networkx as nx\n\nG = nx.cycle_graph(3)\nprint(nx.closeness_vitality(G))",
        "final_answer": "{0: 2.0, 1: 2.0, 2: 2.0}",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "closeness_vitality",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a path graph with 6 vertices (node 0, 1, 2, 3, 4, 5), what are the Voronoi cells centered at nodes 0 and 3 with respect to the shortest-path distance metric? Return a list of lists. The first sublist contains nodes within node 0's Voroni cell in sorted order, and the second sublist contains nodes within node 3's Voroni cell in sorted order.",
        "rationale": "import networkx as nx\n\nG = nx.path_graph(6)\ncenter_nodes = {0, 3}\ncells = nx.voronoi_cells(G, center_nodes)\npartition = set(map(frozenset, cells.values()))\nprint(sorted(map(sorted, partition)))",
        "final_answer": "[[0, 1], [2, 3, 4, 5]]",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "voronoi_cells",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a graph defined by the edges connecting nodes as follows: (0, 1), and (1, 2), how many walks of length 2 connect node 0 and node 2? Return the number of walks.",
        "rationale": "import networkx as nx\n\nG = nx.Graph([(0, 1), (1, 2)])\nwalks = nx.number_of_walks(G, 2)\nprint(walks[0][2])",
        "final_answer": "1",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "number_of_walks",
            "domain": "Loong_Graph_Discrete_Math"
        }
    },
    {
        "question": "In a complete graph with 10 vertices, what is the Wiener index of this graph? Return the Wiener index in float format.",
        "rationale": "import networkx as nx\n\nn = 10\nG = nx.complete_graph(n)\nprint(nx.wiener_index(G))",
        "final_answer": "45.0",
        "metadata": {
            "license": "CC0 1.0 Universal",
            "source": "https://networkx.org/documentation/stable/_modules/index.html",
            "contributor": [
                "Xingyue Huang",
                "Zifeng Ding"
            ],
            "required_dependencies": [
                "networkx==3.4.2",
                "numpy==1.26.4",
                "sympy==1.13.1",
                "scipy==1.15.2"
            ],
            "date_created": "2025-03-21",
            "name": "wiener_index",
            "domain": "Loong_Graph_Discrete_Math"
        }
    }
]
